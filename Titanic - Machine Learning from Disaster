{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-31T23:11:00.366104Z","iopub.execute_input":"2024-05-31T23:11:00.366509Z","iopub.status.idle":"2024-05-31T23:11:00.835653Z","shell.execute_reply.started":"2024-05-31T23:11:00.366473Z","shell.execute_reply":"2024-05-31T23:11:00.834380Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 1. Import Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Sklearn Libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import RFE\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.base import TransformerMixin\n\n# Import models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Import SHAP for model interpretation\nimport shap\n\n# ANSI escape code for bold text\nbold_text = \"\\033[1m\"\n\n# Reset ANSI escape code\nreset_text = \"\\033[0m\"","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:00.837940Z","iopub.execute_input":"2024-05-31T23:11:00.838446Z","iopub.status.idle":"2024-05-31T23:11:04.265987Z","shell.execute_reply.started":"2024-05-31T23:11:00.838410Z","shell.execute_reply":"2024-05-31T23:11:04.264771Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# 2. Load the Data","metadata":{}},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_data = pd.read_csv('/kaggle/input/titanic/test.csv')\nsubmission_data = pd.read_csv('/kaggle/input/titanic/gender_submission.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.267315Z","iopub.execute_input":"2024-05-31T23:11:04.267847Z","iopub.status.idle":"2024-05-31T23:11:04.292517Z","shell.execute_reply.started":"2024-05-31T23:11:04.267814Z","shell.execute_reply":"2024-05-31T23:11:04.291244Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.294267Z","iopub.execute_input":"2024-05-31T23:11:04.294661Z","iopub.status.idle":"2024-05-31T23:11:04.320819Z","shell.execute_reply.started":"2024-05-31T23:11:04.294628Z","shell.execute_reply":"2024-05-31T23:11:04.319363Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.325041Z","iopub.execute_input":"2024-05-31T23:11:04.325802Z","iopub.status.idle":"2024-05-31T23:11:04.345459Z","shell.execute_reply.started":"2024-05-31T23:11:04.325760Z","shell.execute_reply":"2024-05-31T23:11:04.344400Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"submission_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.346986Z","iopub.execute_input":"2024-05-31T23:11:04.348071Z","iopub.status.idle":"2024-05-31T23:11:04.364139Z","shell.execute_reply.started":"2024-05-31T23:11:04.348029Z","shell.execute_reply":"2024-05-31T23:11:04.362966Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived\n0          892         0\n1          893         1\n2          894         0\n3          895         0\n4          896         1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# 3. Exploratory Data Analysis (EDA)","metadata":{}},{"cell_type":"markdown","source":"## 3.1 Data Summary","metadata":{}},{"cell_type":"code","source":"train_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.366069Z","iopub.execute_input":"2024-05-31T23:11:04.366851Z","iopub.status.idle":"2024-05-31T23:11:04.382936Z","shell.execute_reply.started":"2024-05-31T23:11:04.366811Z","shell.execute_reply":"2024-05-31T23:11:04.381436Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.384385Z","iopub.execute_input":"2024-05-31T23:11:04.384816Z","iopub.status.idle":"2024-05-31T23:11:04.425459Z","shell.execute_reply.started":"2024-05-31T23:11:04.384775Z","shell.execute_reply":"2024-05-31T23:11:04.424192Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## 3.2 Missing Values","metadata":{}},{"cell_type":"code","source":"train_data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.427019Z","iopub.execute_input":"2024-05-31T23:11:04.427452Z","iopub.status.idle":"2024-05-31T23:11:04.439153Z","shell.execute_reply.started":"2024-05-31T23:11:04.427413Z","shell.execute_reply":"2024-05-31T23:11:04.437674Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## 3.3 Visualizations","metadata":{}},{"cell_type":"markdown","source":"### 3.3.1 Target Distribution","metadata":{}},{"cell_type":"code","source":"sns.countplot(x='Survived', data=train_data)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.441541Z","iopub.execute_input":"2024-05-31T23:11:04.442034Z","iopub.status.idle":"2024-05-31T23:11:04.692118Z","shell.execute_reply.started":"2024-05-31T23:11:04.441992Z","shell.execute_reply":"2024-05-31T23:11:04.690966Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Survived', ylabel='count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### 3.3.2  Feature Analysis","metadata":{}},{"cell_type":"code","source":"sns.countplot(x='Sex', hue='Survived', data=train_data)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.693534Z","iopub.execute_input":"2024-05-31T23:11:04.693881Z","iopub.status.idle":"2024-05-31T23:11:04.970801Z","shell.execute_reply.started":"2024-05-31T23:11:04.693851Z","shell.execute_reply":"2024-05-31T23:11:04.969575Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Sex', ylabel='count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### 3.3.3 Correlation Analysis","metadata":{}},{"cell_type":"code","source":"# Exclude non-numeric columns and review relevant features\nnumeric_features = train_data[['Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']]\ncorr_matrix = numeric_features.corr()\n\n# Plot the correlation matrix\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:04.972506Z","iopub.execute_input":"2024-05-31T23:11:04.972985Z","iopub.status.idle":"2024-05-31T23:11:05.400866Z","shell.execute_reply.started":"2024-05-31T23:11:04.972942Z","shell.execute_reply":"2024-05-31T23:11:05.399804Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## 3.4 Feature Engineering","metadata":{}},{"cell_type":"markdown","source":"Extract title from names","metadata":{}},{"cell_type":"code","source":"train_data['Title'] = train_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntitle_mapping = {\n    \"Mr\": \"Mr\", \"Miss\": \"Miss\", \"Mrs\": \"Mrs\", \"Master\": \"Master\",\n    \"Dr\": \"Rare\", \"Rev\": \"Rare\", \"Col\": \"Rare\", \"Major\": \"Rare\", \"Mlle\": \"Miss\",\n    \"Countess\": \"Royal\", \"Ms\": \"Miss\", \"Lady\": \"Royal\", \"Jonkheer\": \"Royal\", \"Don\": \"Royal\",\n    \"Mme\": \"Mrs\", \"Capt\": \"Rare\", \"Sir\": \"Royal\"\n}\n\ntrain_data['Title'] = train_data['Title'].map(title_mapping)\ntrain_data['Title'] = train_data['Title'].fillna('Rare')\n\n# Test data\ntest_data['Title'] = test_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\ntest_data['Title'] = test_data['Title'].map(title_mapping)\ntest_data['Title'] = test_data['Title'].fillna('Rare')\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.402960Z","iopub.execute_input":"2024-05-31T23:11:05.403423Z","iopub.status.idle":"2024-05-31T23:11:05.421440Z","shell.execute_reply.started":"2024-05-31T23:11:05.403380Z","shell.execute_reply":"2024-05-31T23:11:05.420098Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"Create family size and IsAlone features","metadata":{}},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.427801Z","iopub.execute_input":"2024-05-31T23:11:05.428263Z","iopub.status.idle":"2024-05-31T23:11:05.452044Z","shell.execute_reply.started":"2024-05-31T23:11:05.428230Z","shell.execute_reply":"2024-05-31T23:11:05.450668Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked Title  \n0      0         A/5 21171   7.2500   NaN        S    Mr  \n1      0          PC 17599  71.2833   C85        C   Mrs  \n2      0  STON/O2. 3101282   7.9250   NaN        S  Miss  \n3      0            113803  53.1000  C123        S   Mrs  \n4      0            373450   8.0500   NaN        S    Mr  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mr</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Miss</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n      <td>Mrs</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mr</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Training Dataset\ntrain_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1\ntrain_data['IsAlone'] = (train_data['FamilySize'] == 1).astype(int)\n\n# Testing Dataset\ntest_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1\ntest_data['IsAlone'] = (test_data['FamilySize'] == 1).astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.453666Z","iopub.execute_input":"2024-05-31T23:11:05.454083Z","iopub.status.idle":"2024-05-31T23:11:05.467063Z","shell.execute_reply.started":"2024-05-31T23:11:05.454049Z","shell.execute_reply":"2024-05-31T23:11:05.465783Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.469008Z","iopub.execute_input":"2024-05-31T23:11:05.469377Z","iopub.status.idle":"2024-05-31T23:11:05.495101Z","shell.execute_reply.started":"2024-05-31T23:11:05.469340Z","shell.execute_reply":"2024-05-31T23:11:05.493956Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked Title  FamilySize  IsAlone  \n0      0         A/5 21171   7.2500   NaN        S    Mr           2        0  \n1      0          PC 17599  71.2833   C85        C   Mrs           2        0  \n2      0  STON/O2. 3101282   7.9250   NaN        S  Miss           1        1  \n3      0            113803  53.1000  C123        S   Mrs           2        0  \n4      0            373450   8.0500   NaN        S    Mr           1        1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n      <td>Mrs</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Miss</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n      <td>Mrs</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Managing the 'Cabin' feature is tricky because it has many missing values and its data structure. To address this, we can create two new features: one to indicate whether cabin information is missing, and another to extract the deck information. After creating these features, we can drop the original 'Cabin' feature.","metadata":{}},{"cell_type":"code","source":"# Training Dataset\n# Extract titles from names\ntrain_data['Title'] = train_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n# Create family size feature from 'sibsp' and 'parch'\ntrain_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1\n\n# Binning age and fare\ntrain_data['AgeBin'] = pd.cut(train_data['Age'], bins=[0, 12, 20, 40, 60, 80], labels=['Child', 'Teenager', 'Adult', 'Middle Aged', 'Senior'])\ntrain_data['FareBin'] = pd.qcut(train_data['Fare'], 4, labels=['Low', 'Medium', 'High', 'Very High'])\n\n# Create a feature indicating whether cabin information is missing\ntrain_data['Cabin_known'] = train_data['Cabin'].notna().astype(int)\n\n# Extract deck information from 'Cabin'\ntrain_data['Deck'] = train_data['Cabin'].str[0]\n\n# Fill missing values in 'Deck' with a placeholder (e.g., 'M' for Missing)\ntrain_data['Deck'] = train_data['Deck'].fillna('M')","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.496622Z","iopub.execute_input":"2024-05-31T23:11:05.497096Z","iopub.status.idle":"2024-05-31T23:11:05.517838Z","shell.execute_reply.started":"2024-05-31T23:11:05.497062Z","shell.execute_reply":"2024-05-31T23:11:05.516545Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"# Extract titles from names\ntest_data['Title'] = test_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n# Create family size feature from 'sibsp' and 'parch'\ntest_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1\n\n# Binning age and fare\ntest_data['AgeBin'] = pd.cut(test_data['Age'], bins=[0, 12, 20, 40, 60, 80], labels=['Child', 'Teenager', 'Adult', 'Middle Aged', 'Senior'])\ntest_data['FareBin'] = pd.qcut(test_data['Fare'], 4, labels=['Low', 'Medium', 'High', 'Very High'])\n\n# Create a feature indicating whether cabin information is missing\ntest_data['Cabin_known'] = test_data['Cabin'].notna().astype(int)\n\n# Extract deck information from 'Cabin'\ntest_data['Deck'] = test_data['Cabin'].str[0]\n\n# Fill missing values in 'Deck' with a placeholder (e.g., 'M' for Missing)\ntest_data['Deck'] = test_data['Deck'].fillna('M')\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.519455Z","iopub.execute_input":"2024-05-31T23:11:05.519827Z","iopub.status.idle":"2024-05-31T23:11:05.537867Z","shell.execute_reply.started":"2024-05-31T23:11:05.519788Z","shell.execute_reply":"2024-05-31T23:11:05.536733Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.539687Z","iopub.execute_input":"2024-05-31T23:11:05.540087Z","iopub.status.idle":"2024-05-31T23:11:05.572798Z","shell.execute_reply.started":"2024-05-31T23:11:05.540047Z","shell.execute_reply":"2024-05-31T23:11:05.571604Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked Title  FamilySize  IsAlone  \\\n0      0         A/5 21171   7.2500   NaN        S    Mr           2        0   \n1      0          PC 17599  71.2833   C85        C   Mrs           2        0   \n2      0  STON/O2. 3101282   7.9250   NaN        S  Miss           1        1   \n3      0            113803  53.1000  C123        S   Mrs           2        0   \n4      0            373450   8.0500   NaN        S    Mr           1        1   \n\n  AgeBin    FareBin  Cabin_known Deck  \n0  Adult        Low            0    M  \n1  Adult  Very High            1    C  \n2  Adult     Medium            0    M  \n3  Adult  Very High            1    C  \n4  Adult     Medium            0    M  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n      <th>AgeBin</th>\n      <th>FareBin</th>\n      <th>Cabin_known</th>\n      <th>Deck</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Adult</td>\n      <td>Low</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n      <td>Mrs</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Adult</td>\n      <td>Very High</td>\n      <td>1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Miss</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n      <td>Mrs</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Adult</td>\n      <td>Very High</td>\n      <td>1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.574527Z","iopub.execute_input":"2024-05-31T23:11:05.575026Z","iopub.status.idle":"2024-05-31T23:11:05.601782Z","shell.execute_reply.started":"2024-05-31T23:11:05.574982Z","shell.execute_reply":"2024-05-31T23:11:05.600565Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked Title  FamilySize  \\\n0  34.5      0      0   330911   7.8292   NaN        Q    Mr           1   \n1  47.0      1      0   363272   7.0000   NaN        S   Mrs           2   \n2  62.0      0      0   240276   9.6875   NaN        Q    Mr           1   \n3  27.0      0      0   315154   8.6625   NaN        S    Mr           1   \n4  22.0      1      1  3101298  12.2875   NaN        S   Mrs           3   \n\n   IsAlone       AgeBin FareBin  Cabin_known Deck  \n0        1        Adult     Low            0    M  \n1        0  Middle Aged     Low            0    M  \n2        1       Senior  Medium            0    M  \n3        1        Adult  Medium            0    M  \n4        0        Adult  Medium            0    M  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n      <th>AgeBin</th>\n      <th>FareBin</th>\n      <th>Cabin_known</th>\n      <th>Deck</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Low</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mrs</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Middle Aged</td>\n      <td>Low</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Senior</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mrs</td>\n      <td>3</td>\n      <td>0</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# 4. Data Preprocessing","metadata":{}},{"cell_type":"markdown","source":"## 4.1 Train-Validation Split","metadata":{}},{"cell_type":"code","source":"X = train_data.drop(['PassengerId','Survived', 'Name', 'Ticket', 'Cabin'], axis=1)\ny = train_data['Survived']\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.603481Z","iopub.execute_input":"2024-05-31T23:11:05.603952Z","iopub.status.idle":"2024-05-31T23:11:05.617279Z","shell.execute_reply.started":"2024-05-31T23:11:05.603907Z","shell.execute_reply":"2024-05-31T23:11:05.615996Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"X_val.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.619031Z","iopub.execute_input":"2024-05-31T23:11:05.619490Z","iopub.status.idle":"2024-05-31T23:11:05.642941Z","shell.execute_reply.started":"2024-05-31T23:11:05.619451Z","shell.execute_reply":"2024-05-31T23:11:05.641602Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex   Age  SibSp  Parch     Fare Embarked   Title  FamilySize  \\\n709       3    male   NaN      1      1  15.2458        C  Master           3   \n439       2    male  31.0      0      0  10.5000        S      Mr           1   \n840       3    male  20.0      0      0   7.9250        S      Mr           1   \n720       2  female   6.0      0      1  33.0000        S    Miss           2   \n39        3  female  14.0      1      0  11.2417        C    Miss           2   \n\n     IsAlone    AgeBin    FareBin  Cabin_known Deck  \n709        0       NaN       High            0    M  \n439        1     Adult     Medium            0    M  \n840        1  Teenager     Medium            0    M  \n720        0     Child  Very High            0    M  \n39         0  Teenager     Medium            0    M  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n      <th>AgeBin</th>\n      <th>FareBin</th>\n      <th>Cabin_known</th>\n      <th>Deck</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>709</th>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>1</td>\n      <td>15.2458</td>\n      <td>C</td>\n      <td>Master</td>\n      <td>3</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>High</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>439</th>\n      <td>2</td>\n      <td>male</td>\n      <td>31.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>10.5000</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>840</th>\n      <td>3</td>\n      <td>male</td>\n      <td>20.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Teenager</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>720</th>\n      <td>2</td>\n      <td>female</td>\n      <td>6.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>33.0000</td>\n      <td>S</td>\n      <td>Miss</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Child</td>\n      <td>Very High</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>3</td>\n      <td>female</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11.2417</td>\n      <td>C</td>\n      <td>Miss</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Teenager</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.644503Z","iopub.execute_input":"2024-05-31T23:11:05.644944Z","iopub.status.idle":"2024-05-31T23:11:05.667594Z","shell.execute_reply.started":"2024-05-31T23:11:05.644910Z","shell.execute_reply":"2024-05-31T23:11:05.666409Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex   Age  SibSp  Parch     Fare Embarked Title  FamilySize  \\\n331       1    male  45.5      0      0  28.5000        S    Mr           1   \n733       2    male  23.0      0      0  13.0000        S    Mr           1   \n382       3    male  32.0      0      0   7.9250        S    Mr           1   \n704       3    male  26.0      1      0   7.8542        S    Mr           2   \n813       3  female   6.0      4      2  31.2750        S  Miss           7   \n\n     IsAlone       AgeBin    FareBin  Cabin_known Deck  \n331        1  Middle Aged       High            1    C  \n733        1        Adult     Medium            0    M  \n382        1        Adult     Medium            0    M  \n704        0        Adult        Low            0    M  \n813        0        Child  Very High            0    M  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n      <th>AgeBin</th>\n      <th>FareBin</th>\n      <th>Cabin_known</th>\n      <th>Deck</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>331</th>\n      <td>1</td>\n      <td>male</td>\n      <td>45.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>28.5000</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Middle Aged</td>\n      <td>High</td>\n      <td>1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>733</th>\n      <td>2</td>\n      <td>male</td>\n      <td>23.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>382</th>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>704</th>\n      <td>3</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.8542</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Adult</td>\n      <td>Low</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>813</th>\n      <td>3</td>\n      <td>female</td>\n      <td>6.0</td>\n      <td>4</td>\n      <td>2</td>\n      <td>31.2750</td>\n      <td>S</td>\n      <td>Miss</td>\n      <td>7</td>\n      <td>0</td>\n      <td>Child</td>\n      <td>Very High</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.669295Z","iopub.execute_input":"2024-05-31T23:11:05.670418Z","iopub.status.idle":"2024-05-31T23:11:05.680762Z","shell.execute_reply.started":"2024-05-31T23:11:05.670372Z","shell.execute_reply":"2024-05-31T23:11:05.679566Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"0    0\n1    1\n2    1\n3    1\n4    0\nName: Survived, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"# 5. Model Building","metadata":{}},{"cell_type":"markdown","source":"## 5.1 Model Selection","metadata":{}},{"cell_type":"code","source":"models = {\n    'Logistic Regression': LogisticRegression(max_iter=200),\n    'Random Forest': RandomForestClassifier(),\n    'Support Vector Machine': SVC(),\n    'XGBoost': XGBClassifier(use_label_encoder=False, eval_metric='logloss'),\n    'Gradient Boosting': GradientBoostingClassifier(),\n    'K-Nearest Neighbors': KNeighborsClassifier(),\n    'Neural Network': MLPClassifier(max_iter=3000)\n}","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.682174Z","iopub.execute_input":"2024-05-31T23:11:05.682550Z","iopub.status.idle":"2024-05-31T23:11:05.694041Z","shell.execute_reply.started":"2024-05-31T23:11:05.682509Z","shell.execute_reply":"2024-05-31T23:11:05.692791Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":"## 5.2 Pipeline","metadata":{}},{"cell_type":"code","source":"# Define the columns\ncategorical_cols = ['Sex', 'Embarked', 'Title', 'AgeBin', 'FareBin', 'Deck']\nnumerical_cols = ['Age', 'Fare']\n\n# Create a ColumnTransformer\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cat', Pipeline([\n            ('imputer', SimpleImputer(strategy='most_frequent')),\n            ('onehot', OneHotEncoder(handle_unknown='ignore'))\n        ]), categorical_cols),\n        ('num', Pipeline([\n            ('imputer', SimpleImputer(strategy='median')),\n            ('scaler', StandardScaler(with_mean=False))\n        ]), numerical_cols)\n    ],\n    remainder='passthrough'\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.695455Z","iopub.execute_input":"2024-05-31T23:11:05.695868Z","iopub.status.idle":"2024-05-31T23:11:05.706499Z","shell.execute_reply.started":"2024-05-31T23:11:05.695830Z","shell.execute_reply":"2024-05-31T23:11:05.705244Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":"## 5.3 Parameters Grid","metadata":{}},{"cell_type":"code","source":"param_grids = {\n    'Logistic Regression': {\n        'model__C': [0.01, 0.1, 1, 10, 100],\n        'model__max_iter': [1000, 3000, 5000],\n        'model__solver': ['newton-cg', 'lbfgs', 'liblinear'],\n        'model__penalty': ['l2'],\n        'model__tol': [1e-4, 1e-3, 1e-2]\n    },\n    'Random Forest': {\n        'model__n_estimators': [100, 200, 300],\n        'model__max_depth': [None, 10, 20],\n        'model__min_samples_split': [2, 5, 10]\n    },\n    'Support Vector Machine': {\n        'model__C': [0.1, 1, 10],\n        'model__kernel': ['linear', 'rbf', 'poly'],\n        'model__gamma': ['scale', 'auto']\n    },\n    'XGBoost': {\n        'model__n_estimators': [100, 200, 300],\n        'model__learning_rate': [0.01, 0.1, 0.2],\n        'model__max_depth': [3, 5, 7]\n    },\n    'Gradient Boosting': {\n        'model__n_estimators': [50, 100, 200],\n        'model__learning_rate': [0.01, 0.1, 0.2],\n        'model__max_depth': [3, 5, 7]\n    },\n    'K-Nearest Neighbors': {\n        'model__n_neighbors': [3, 5, 7, 9],\n        'model__weights': ['uniform', 'distance'],\n        'model__metric': ['euclidean', 'manhattan']\n    },\n    'Neural Network': {\n        'model__hidden_layer_sizes': [(50,), (100,), (50, 50)],\n        'model__activation': ['relu', 'tanh'],\n        'model__solver': ['adam', 'sgd'],\n        'model__alpha': [0.0001, 0.001, 0.01]\n    }\n\n}","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.708872Z","iopub.execute_input":"2024-05-31T23:11:05.709313Z","iopub.status.idle":"2024-05-31T23:11:05.724494Z","shell.execute_reply.started":"2024-05-31T23:11:05.709273Z","shell.execute_reply":"2024-05-31T23:11:05.723389Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":"## 5.4 Hyperparameter Tuning","metadata":{}},{"cell_type":"code","source":"X_val.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.725938Z","iopub.execute_input":"2024-05-31T23:11:05.726320Z","iopub.status.idle":"2024-05-31T23:11:05.753087Z","shell.execute_reply.started":"2024-05-31T23:11:05.726283Z","shell.execute_reply":"2024-05-31T23:11:05.751809Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex   Age  SibSp  Parch     Fare Embarked   Title  FamilySize  \\\n709       3    male   NaN      1      1  15.2458        C  Master           3   \n439       2    male  31.0      0      0  10.5000        S      Mr           1   \n840       3    male  20.0      0      0   7.9250        S      Mr           1   \n720       2  female   6.0      0      1  33.0000        S    Miss           2   \n39        3  female  14.0      1      0  11.2417        C    Miss           2   \n\n     IsAlone    AgeBin    FareBin  Cabin_known Deck  \n709        0       NaN       High            0    M  \n439        1     Adult     Medium            0    M  \n840        1  Teenager     Medium            0    M  \n720        0     Child  Very High            0    M  \n39         0  Teenager     Medium            0    M  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n      <th>AgeBin</th>\n      <th>FareBin</th>\n      <th>Cabin_known</th>\n      <th>Deck</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>709</th>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>1</td>\n      <td>15.2458</td>\n      <td>C</td>\n      <td>Master</td>\n      <td>3</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>High</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>439</th>\n      <td>2</td>\n      <td>male</td>\n      <td>31.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>10.5000</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>840</th>\n      <td>3</td>\n      <td>male</td>\n      <td>20.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Teenager</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>720</th>\n      <td>2</td>\n      <td>female</td>\n      <td>6.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>33.0000</td>\n      <td>S</td>\n      <td>Miss</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Child</td>\n      <td>Very High</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>3</td>\n      <td>female</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11.2417</td>\n      <td>C</td>\n      <td>Miss</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Teenager</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"best_estimators = {}\n\n# Dictionary to store evaluation results\nevaluation_results = {}\n\nfor name, model in models.items():\n    pipe = Pipeline([\n        ('preprocessing', preprocessor),\n        ('model', model)\n    ])\n    grid_search = GridSearchCV(pipe, param_grids[name], cv=5, n_jobs=-1, error_score='raise')\n    grid_search.fit(X_train, y_train)\n    best_estimators[name] = grid_search.best_estimator_\n    print(f\"{name} best params: {grid_search.best_params_}\")\n\n    # Evaluate best model\n    y_pred = grid_search.predict(X_val)\n    accuracy = accuracy_score(y_val, y_pred)\n    evaluation_results[name] = accuracy\n    print(f\"{name} Accuracy: {accuracy}\")\n    print(\"\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:11:05.754431Z","iopub.execute_input":"2024-05-31T23:11:05.754748Z","iopub.status.idle":"2024-05-31T23:15:17.069482Z","shell.execute_reply.started":"2024-05-31T23:11:05.754721Z","shell.execute_reply":"2024-05-31T23:15:17.067594Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"Logistic Regression best params: {'model__C': 1, 'model__max_iter': 1000, 'model__penalty': 'l2', 'model__solver': 'newton-cg', 'model__tol': 0.0001}\nLogistic Regression Accuracy: 0.8156424581005587\n\n\nRandom Forest best params: {'model__max_depth': 20, 'model__min_samples_split': 10, 'model__n_estimators': 300}\nRandom Forest Accuracy: 0.8156424581005587\n\n\nSupport Vector Machine best params: {'model__C': 1, 'model__gamma': 'scale', 'model__kernel': 'rbf'}\nSupport Vector Machine Accuracy: 0.8156424581005587\n\n\nXGBoost best params: {'model__learning_rate': 0.01, 'model__max_depth': 3, 'model__n_estimators': 200}\nXGBoost Accuracy: 0.8212290502793296\n\n\nGradient Boosting best params: {'model__learning_rate': 0.01, 'model__max_depth': 5, 'model__n_estimators': 200}\nGradient Boosting Accuracy: 0.8100558659217877\n\n\nK-Nearest Neighbors best params: {'model__metric': 'euclidean', 'model__n_neighbors': 9, 'model__weights': 'uniform'}\nK-Nearest Neighbors Accuracy: 0.8156424581005587\n\n\nNeural Network best params: {'model__activation': 'relu', 'model__alpha': 0.01, 'model__hidden_layer_sizes': (50, 50), 'model__solver': 'sgd'}\nNeural Network Accuracy: 0.8212290502793296\n\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 5.5 Model Evaluation","metadata":{}},{"cell_type":"code","source":"# Display evaluation results\nprint(bold_text + \"Evaluation Results:\" + reset_text)\nfor name, accuracy in evaluation_results.items():\n    print(f\"{name} Accuracy: {accuracy}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:15:17.072514Z","iopub.execute_input":"2024-05-31T23:15:17.073881Z","iopub.status.idle":"2024-05-31T23:15:17.085180Z","shell.execute_reply.started":"2024-05-31T23:15:17.073804Z","shell.execute_reply":"2024-05-31T23:15:17.083464Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"\u001b[1mEvaluation Results:\u001b[0m\nLogistic Regression Accuracy: 0.8156424581005587\nRandom Forest Accuracy: 0.8156424581005587\nSupport Vector Machine Accuracy: 0.8156424581005587\nXGBoost Accuracy: 0.8212290502793296\nGradient Boosting Accuracy: 0.8100558659217877\nK-Nearest Neighbors Accuracy: 0.8156424581005587\nNeural Network Accuracy: 0.8212290502793296\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 6. Ensemble Methods","metadata":{}},{"cell_type":"code","source":"\n# Create a list of tuples containing model names and their corresponding estimators\nestimators = [(name, model) for name, model in best_estimators.items()]\n\n# Initialize the VotingClassifier with all models\nvoting_clf = VotingClassifier(estimators=estimators, voting='hard')\n\n# Fit the VotingClassifier on the training data\nvoting_clf.fit(X_train, y_train)\n\n# Make predictions on the validation data\ny_pred_voting = voting_clf.predict(X_val)\n\n# Calculate accuracy\naccuracy_voting = accuracy_score(y_val, y_pred_voting)\n\n# Print the accuracy\nprint(f\"Voting Classifier Accuracy: {accuracy_voting}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:15:17.088356Z","iopub.execute_input":"2024-05-31T23:15:17.090353Z","iopub.status.idle":"2024-05-31T23:15:26.597738Z","shell.execute_reply.started":"2024-05-31T23:15:17.090279Z","shell.execute_reply":"2024-05-31T23:15:26.592830Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"Voting Classifier Accuracy: 0.8212290502793296\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 7. Visualization","metadata":{}},{"cell_type":"code","source":"# Collect accuracies for all models\naccuracies = {}\nfor name, model in best_estimators.items():\n    accuracy = accuracy_score(y_val, model.predict(X_val))\n    accuracies[name] = accuracy\n\n# Add accuracy for the Voting Classifier\naccuracies['Voting Classifier'] = accuracy_voting\n\n# Sort accuracies in descending order\nsorted_accuracies = dict(sorted(accuracies.items(), key=lambda item: item[1], reverse=True))\nmodel_names = list(sorted_accuracies.keys())\nmodel_accuracies = list(sorted_accuracies.values())\n\nplt.figure(figsize=(10, 6))\nsns.barplot(x=model_accuracies, y=model_names, palette='viridis')\nplt.xlabel('Accuracy')\nplt.ylabel('Model')\nplt.title('Model Accuracies')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:15:26.601022Z","iopub.execute_input":"2024-05-31T23:15:26.601725Z","iopub.status.idle":"2024-05-31T23:15:27.333422Z","shell.execute_reply.started":"2024-05-31T23:15:26.601660Z","shell.execute_reply":"2024-05-31T23:15:27.332141Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stderr","text":"unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# 6. Model Deployment","metadata":{}},{"cell_type":"code","source":"test_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:15:27.335018Z","iopub.execute_input":"2024-05-31T23:15:27.335494Z","iopub.status.idle":"2024-05-31T23:15:27.358546Z","shell.execute_reply.started":"2024-05-31T23:15:27.335450Z","shell.execute_reply":"2024-05-31T23:15:27.357256Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked Title  FamilySize  \\\n0  34.5      0      0   330911   7.8292   NaN        Q    Mr           1   \n1  47.0      1      0   363272   7.0000   NaN        S   Mrs           2   \n2  62.0      0      0   240276   9.6875   NaN        Q    Mr           1   \n3  27.0      0      0   315154   8.6625   NaN        S    Mr           1   \n4  22.0      1      1  3101298  12.2875   NaN        S   Mrs           3   \n\n   IsAlone       AgeBin FareBin  Cabin_known Deck  \n0        1        Adult     Low            0    M  \n1        0  Middle Aged     Low            0    M  \n2        1       Senior  Medium            0    M  \n3        1        Adult  Medium            0    M  \n4        0        Adult  Medium            0    M  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n      <th>AgeBin</th>\n      <th>FareBin</th>\n      <th>Cabin_known</th>\n      <th>Deck</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Low</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mrs</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Middle Aged</td>\n      <td>Low</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Senior</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mr</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>Mrs</td>\n      <td>3</td>\n      <td>0</td>\n      <td>Adult</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>M</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Sort accuracies dictionary by values (accuracies)\nbest_model_name = max(accuracies, key=accuracies.get)\nif best_model_name == 'Voting Classifier':\n    best_model = voting_clf\nelse:\n    best_model = best_estimators[best_model_name]\n\n# Prepare submission file\nsubmission = test_data[['PassengerId']].copy()\nsubmission['Survived'] = best_model.predict(test_data)\nsubmission.to_csv('submission.csv', index=False)\nprint(f'{best_model_name}: {max(accuracies.values())}')\nprint('-'*100)\nsubmission.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-31T23:24:55.526814Z","iopub.execute_input":"2024-05-31T23:24:55.527270Z","iopub.status.idle":"2024-05-31T23:24:55.561732Z","shell.execute_reply.started":"2024-05-31T23:24:55.527235Z","shell.execute_reply":"2024-05-31T23:24:55.560839Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"XGBoost: 0.8212290502793296\n----------------------------------------------------------------------------------------------------\n","output_type":"stream"},{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived\n0          892         0\n1          893         1\n2          894         0\n3          895         0\n4          896         1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]}]}